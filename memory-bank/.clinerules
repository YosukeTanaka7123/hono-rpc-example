# Cline Rules: Hono RPC Example

## プロジェクトルール

1. コーディングスタイル
   - biome の設定に従う
   - TypeScript の strict モードを使用
   - インラインスタイルは最小限に抑える

2. 型安全性
   - any の使用を避ける
   - Zod スキーマを積極的に使用する
   - API の型定義は共有する

3. コンポーネント設計
   - ロジックは Custom Hook として分離
   - Props の型定義を明示的に行う
   - 責務の分離を意識する

## 開発フロー

1. タスク実行
   ```bash
   # 開発サーバーの起動
   pnpm dev
   
   # 型チェック
   pnpm check-types
   
   # linting
   pnpm check
   
   # ビルド
   pnpm build
   
   # デプロイ
   pnpm deploy
   ```

2. API エンドポイント追加時
   - Zod スキーマの定義
   - エラーハンドリングの実装
   - クライアント側の型更新

3. UI コンポーネント追加時
   - Custom Hook での状態管理
   - バリデーションの実装
   - エラー状態の考慮

## プロジェクトインサイト

1. アーキテクチャの意図
   - シンプルさを重視
   - 型安全性の確保
   - 保守性の向上

2. パフォーマンスに関する注意点
   - クライアントサイドのキャッシュ戦略
   - サーバーサイドの軽量化
   - バンドルサイズの最適化

3. セキュリティの考慮事項
   - CORS の適切な設定
   - 入力値のバリデーション
   - エラーメッセージの適切な処理

## ツールの使用パターン

1. TanStack Query
   - キャッシュの積極的な活用
   - エラーハンドリングの統一
   - 再検証戦略の最適化

2. React Hook Form
   - Zod との統合
   - エラーメッセージのカスタマイズ
   - フィールドの動的な制御

3. Hono Client
   - 型定義の自動生成
   - エラーハンドリングの統一
   - リクエストの最適化

## 意思決定の履歴

1. アーキテクチャの選択
   - Hono: 軽量で型安全
   - React: エコシステムの活用
   - TanStack Query: 状態管理の簡素化

2. 開発環境の構築
   - Turborepo: モノレポ管理の効率化
   - pnpm: 依存関係の最適化
   - biome: コード品質の統一

3. デプロイ戦略
   - Cloudflare Workers: エッジでの実行
   - メモリ内データストア: 初期実装の簡素化
   - 将来的なデータベース導入を考慮
